#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
#  Copyright 2014,2015 Igalia S.L.
#  Carlos Alberto Lopez Perez <clopez@igalia.com>
#  Marcos Chavarr√≠a Teiejeiro <chavarria1991@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
      
import os
import urllib
import re
import argparse
import sys
import subprocess
from termcolor import cprint
from wkth import wktesthunter
                   
extrahelp = '''
About the colors:

    - A red color means that the test reported a REGRESION error.
    - A yellow color means that the test reported a FLAKY error.
    - A blue color means that the test reported a MISSING error.
    - A green color means that the test result was expected.
      - If 'FAIL' is on the expectation, then the test matches the expectation
        if the result is any of 'FAIL', 'TEXT', 'IMAGE+TEXT' or 'AUDIO'.
    - A white color means UNKNOWN (no data)


The meaning of the possible results for a test on a revision is:

    "UNKNOWN" means that we have no data for that revision. This means that
    the bot didn't ran the test for this revision. This could have been
    caused by a compilation failure on that revision, or could have been
    that the bot skipped that revision because of the size of the build queue
    at that moment, or maybe the bot was offline.... etc.


    "NOERROR" means that we don't know the exactly result of this test on that revision,
    but we know that the complete set of layout tests finished on that revision and no
    specific problem was reported with this test.
    This usually means one of this four options:
    - The test executed without failure (if the test was not flagged on TestExpectations).
    - The test gave the failure expected on TestExpectations.
    - The test didn't exist by that revision.
    - The test was marked to be skipped.


    "IMAGE" means ImageOnlyFailure

    "MISSING" means Missing results.

    "PASS" means the test passed. This can be bad (if the color is red means that the test
     was not expected to pass according to TestExpectations).

    "TEXT" means text failure.

    "CRASH" means the test crashed.

    "AUDIO" means audio failure

    "FAIL" means failure

Note for lazy people:

    * As an extra goodie from python's argparse, the parameters can be shorted to any length
      meanwhile there is no possible confusion between them. For example, you can use any of
      "--onlyprinterr", "--only" or "--o"; or you can use "--mergeunknown", "--merge" or "--m"
'''

def get_svn_rev (test):
    svncmd = ["svn", "log", "-r" ,"1:HEAD", "--limit", "1",
              "https://svn.webkit.org/repository/webkit/trunk/LayoutTests/" + test ]
    psvn = subprocess.Popen( svncmd, stdout=subprocess.PIPE,stderr=subprocess.PIPE )
    (outsvn, errsvn) = psvn.communicate()
    svnreturncode = psvn.returncode
    if svnreturncode == 0:
        svnrev = outsvn.decode('utf8').splitlines()[1].split()[0]
        return int(re.match("^r([0-9]+)$", svnrev).groups()[0])
    else:
        return 1

def get_print_color (res):
    if "report" in res:
        return {
            "MISSING": "blue",
            "REGRESSION": "red",
            "FLAKY": "yellow",
            "NOWPASSING": "magenta"
            }[res["report"]]
    if res["actual"] == "UNKNOWN":
        return "white"
    return "green"

def main_hunt(resultsdir, bot):
    parser = argparse.ArgumentParser(prog="wktesthunter hunt", epilog=extrahelp, formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument("--onlyprinterr", help="Don't print NOERROR or UNKNOWN results.", action="store_true")
    parser.add_argument("--mergeunknown", help="If set, will join the UNKNOWN results (no data for this revision)\n"
                                               "with the surrounding results. If the surrounding results have \n"
                                               "different values it would print UNKNOWN.\n", action="store_true")
    parser.add_argument("--ignoreunknown", help="If set, will not print UNKNOWN (no data for this revision)\n"
                                          "This option disregards --mergeunknown.\n", action="store_true")
    parser.add_argument("--noshowexpected", help="Print only the test results without the expected result.", action="store_true")
    parser.add_argument("--nocolor", help="Don't print colors", action="store_true")
    parser.add_argument("--nochecksvn", help="Don't query svn.webkit.org for the revision that added the test and assume it was r1.", action="store_true")
    parser.add_argument("test_name", type=str, help="Name for the test (as specified on run-webkit-tests).")
    cmd_ind = sys.argv.index("hunt")    
    args = parser.parse_args(sys.argv[cmd_ind + 1:])


    detail = not bool(args.onlyprinterr)
    mergeunknown = bool(args.mergeunknown)
    ignoreunknown = bool(args.ignoreunknown)
    showexpected = not bool(args.noshowexpected)
    usecolor = not bool(args.nocolor)
    checksvn = not bool(args.nochecksvn)

    wkth = wktesthunter.WKTestHunter(resultsdir, bot)

    firstrev = get_svn_rev(args.test_name) if checksvn else 1

    (lastrev, lastbuild) = wkth.get_last_revision()    
    print("INFO: Last revision fetched: r%i - b%i" % (lastrev, lastbuild))

    if firstrev > 1: print("INFO: From svn.webkit.org got that r%d added this test." %(firstrev))

    try:
        results = wkth.get_test_results(args.test_name, first_rev=firstrev)
    except ValueError as e:
        print("ERROR: %s" % (e.strerror))
        
    compressed_results = wkth.compress_results(results, merge_unknown=not ignoreunknown and mergeunknown)
    if not ignoreunknown:
        compressed_results = wkth.fill_gaps(compressed_results)
    compressed_results.sort(key= lambda a: a["start_ind"])

    print("Results for test: %s" % (args.test_name))

    for res in compressed_results:
        if not ("reported" in res["res"] or detail):
            continue
        print_str = ""
        if res["end_ind"] - res["start_ind"]:
            print_str += ("[r%i-r%i] (%i)" % (res["start_ind"], res["end_ind"], res["end_ind"] - res["start_ind"])).ljust(30)   
        else:
            print_str += ("r%i" % (res["start_ind"])).ljust(30)
    
        print_str += res["res"]["actual"]
        
        if showexpected and "expected" in res["res"]:
            print_str += " (Expected: %s)" % (res["res"]["expected"])

        if usecolor:
            color = get_print_color(res["res"])
            cprint(print_str, color, end="\n")
        else:
            print(print_str)

def main_update(resultsdir, bot):
    parser = argparse.ArgumentParser(prog="wktesthunter [--config path] update", formatter_class=argparse.RawTextHelpFormatter)
    cmd_ind = sys.argv.index("update") 
    args = parser.parse_args(sys.argv[cmd_ind + 1:])

    wkth = wktesthunter.WKTestHunter(resultsdir, bot)
    wkth.fetch_results()
    print("DONE!")

def main_get_failing(resultsdir, bot):
    parser = argparse.ArgumentParser(prog="wktesthunter [--config path] failing", formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument("--nocolor", help="Don't print colors", action="store_true")
    parser.add_argument("--oneline", help="Print all test with no results in one line"
                                          "(to pass as argument to run-webkit-tests).", action="store_true")
    parser.add_argument("-n","--numbuilds", help="Show faling test on the last NUMBUILDS builds.", default=1, type=int)
    cmd_ind = sys.argv.index("failing") 
    args = parser.parse_args(sys.argv[cmd_ind + 1:])

    usecolor = not args.nocolor
    oneline = args.oneline
    numbuilds = args.numbuilds

    wkth = wktesthunter.WKTestHunter(resultsdir, bot)

    (lastrev, lastbuild) = wkth.get_last_revision()
    if numbuilds == 1:   
        print("Test results for r%i - b%i" % (lastrev, lastbuild))
    else:
        print("Test results for builds b%i - b%i (%i)" % (lastbuild - numbuilds, lastbuild, numbuilds))
    
    failing_tests = list(wkth.get_failing_tests(numbuilds).items())
    failing_tests.sort(key=lambda a: a[1]["report"]+a[1]["actual"])

    for name,res in failing_tests:
        if oneline:
            sys.stdout.write("%s " % (name[1:]))
            continue
        print_str = "%s [%s] Expected: %s" % (name[1:], res["actual"], res["expected"])
        if usecolor:
            color = get_print_color(res)
            cprint(print_str, color)
        else:
            print(print_str)
    if oneline: print("")
    

def get_config(path):
    import configparser
    config = configparser.ConfigParser()
    if config.read(os.path.expanduser(path)) and "results" in config and "resultsdir" in config["results"] and "bot" in config["results"]:
       return config
    print("You should set the results directory and the current bot.")
    
    resultsdir = input("Results Directory: [~/wk-tools/webkit-testhunter/jsonresults]")
    if not resultsdir:
        resultsdir = "~/wk-tools/webkit-testhunter/jsonresults"
    
    bot = input("Bot: [GTK Linux 64-bit Release (Tests)] ")
    if not bot:
        bot = "GTK Linux 64-bit Release (Tests)"

    config["results"] = {
        "resultsdir": resultsdir,
        "bot": bot    
    }
    
    with open(os.path.expanduser(path), "w") as f:
        config.write(f)

    return config


if __name__ == '__main__':

    cmds = {
        "update": main_update,
        "failing": main_get_failing,
        "hunt": main_hunt
       }

    parser = argparse.ArgumentParser(epilog=extrahelp, formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument("-config", help="Config file to use", default="~/.wkhunter.cfg")
    parser.add_argument("cmd", help="Subcommand to run")

    if len(sys.argv) > 1 and sys.argv[1] == "-c":
        args = parser.parse_args(sys.argv[1:4])
    else:
        args = parser.parse_args(sys.argv[1:2])

    config = get_config(args.config)

    resultsdir = os.path.expanduser(config["results"]["resultsdir"])
    bot = config["results"]["bot"]

    if args.cmd not in cmds:
        print("Unrecognized command")
        parser.print_help()
        sys.exit()

    cmds[args.cmd](resultsdir, bot)

               
